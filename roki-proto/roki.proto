syntax = "proto2";
package roki;

// Search for journeys within a time range
message RangeRequest {

  // constraints that the journeys must fulfill
  required JourneyConstraints constraints = 1;

  // journeys selection criteria to use
  optional RangeCriteria criteria = 2;

  // keep direct journeys in the response
  // even if they would be dominated based on the criteria
  optional bool keep_direct_journeys = 3;

  // The length of the time range in which we want to search for journeys.
  // - if constraints.datetime_represents = Departure we will search for journeys
  //  that departs in [constraints.datetime, constraints.datetime + range_duration]
  // - if constraints.datetime_represents = Arrival we will search for journeys
  //  that arrives in [constraints.datetime - range_duration, constraints.datetime]
  optional Duration range_duration = 4;
  
}

// Search for journeys at a time instant
message JourneysRequest {
  required JourneyConstraints constraints = 1;

  optional JourneysCriteria criteria = 2;

}

message JourneyConstraints {

  // where the journey can begin
  required Fallbacks departures = 1;

  // where the journey can end
  required Fallbacks arrivals = 2;

  // the requested datetime
  // - if datetime_represents = Departure the journey must depart after datetime
  // - if datetime_represents = Arrival   the journey must arrive before datetime
  required Timestamp datetime = 3;
  optional DatetimeRepresents datetime_represents = 4;

  // - if realtime_level = Base the journey must follow the static schedule from ntfs
  // - if realtime_level = Realtime the journey must follow the realtime schedule from gtfs-rt
  optional RealtimeLevel realtime_level = 5;

  // the maximum number of legs in the journey
  optional uint32 max_nb_of_legs = 6;

  // the arrival time of the journey must be less than its departure time + max_journey_duration
  optional Duration max_journey_duration = 7;

  // - if datetime_represents = Departure the journey must 
  //  arrives before datetime + max_duration_from_requested_datetime
  // - if datetime_represents = Arrival   the journey must 
  //  departs after datetime - max_duration_from_requested_datetime
  optional Duration max_duration_from_requested_datetime = 8;

  // the minimum duration we must wait at a transfer
  optional Duration transfer_min_wait_duration = 9;

  // the maximum duration we can wait at a transfer
  optional Duration max_wait_duration = 10;

  // forbids waiting overnight at a transfer
  optional OvernightFence overnight_fence = 11;

  // restricts the trips and/or stations 
  // that the journey can use
  optional Filters filters = 12;
}

message Fallbacks {
  // allowed stations by id
  repeated StationFallback stations = 1;

  // allowed stops by id
  repeated StopFallback stops = 2;

  // allowed stations by geographical zone
  repeated BoxFallback stations_within = 3;

  // allowed stops by geographical zone
  repeated BoxFallback stops_within = 4;
}

message StationFallback {
  // id of the station, as it appears in gtfs stops.txt
  required string station_id = 1;

  // how long does it takes to reach this station
  optional Duration duration = 2;
}

message StopFallback {
  // id of the stop, as it appears in gtfs stops.txt
  required string stop_id = 1;

  // how long does it takes to reach this stop
  optional Duration duration = 2;
}

// all objects in the square centered at center
// with a side of length 2*distance
message BoxFallback {
  required Coord center = 1;
  required Distance distance = 2;
}

message Distance {
  required uint32 meters = 1;
}

enum DatetimeRepresents {
  Departure = 1;
  Arrival = 2;
}

enum RealtimeLevel {
  Base = 1;
  Realtime = 2;
}

enum RangeCriteria {
  RangeTime = 1;
  RangeTimeAndLegs = 2;
}


enum JourneysCriteria {
  JourneysTime = 1;
  JourneysTimeAndLegs = 2;
  JourneysTimeAndWalking = 3;
}

// when active, this will forbid any transfer that result in 
// waiting across the specified time_in_day, on any day.
message OvernightFence {
  // is the fence active or not
  required bool enable = 1;

  // Time in day string formatted as HH:MM::SS
  // Must be comprised between 00:00:00 and 23:59:59
  // Must be present if enable = true
  optional string time_in_day = 2;

  // A timezone identifier such as Europe/Paris
  // See the list of valid values at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  // Specify the timezone in which the time_in_day must be interpreted. 
  // Must be present if enable = true
  optional string timezone = 3;
}



message Filters {
  // if allowed_stop or allowed_stations are not empty
  // then any board or debark must take place
  // at one of the allowed_stop/allowed_station
  repeated string allowed_stop = 1;
  repeated string allowed_station = 2;

  // Forbid board and debark at any of the forbidden_stop/forbidden_station.

  repeated string forbidden_stop = 3;
  repeated string forbidden_station = 4;


  // if allowed_trip/route/agency/route_type are not empty
  // then we can only use trips that belongs to the specified
  // allowed_trip/route/agency/route_type
  repeated string allowed_trip = 5;
  repeated string allowed_route = 6;
  repeated string allowed_agency = 7;
  repeated string allowed_route_type = 8;

  // Forbid using trips that belongs to the specified
  // forbidden_trip/route/agency/route_type.
  // Active only if allowed_trip/route/agency/route_type are empty
  repeated string forbidden_trip = 9;
  repeated string forbidden_route = 10;
  repeated string forbidden_agency = 11;
  repeated string forbidden_route_type = 12;

  // if true, then we must use trips and stops that 
  // are marked with wheelchair_boarding = True in the gtfs
  optional bool wheelchair = 13;

  // if true, then we must use trips 
  // are marked with bikes_allowed = True in the gtfs
  optional bool bike = 14;
}

message Response {
  repeated Journey journeys = 1;

  repeated Trip trips = 2;
  repeated Route routes = 3;
  repeated Stop stops = 4;
  repeated Station stations = 5;
  repeated Agency agencies = 6;
  repeated TripUpdate trip_updates = 7;
  repeated ServiceAlert service_alerts = 8;
}

message Trip {
  required string id = 1;
  
  // idx in Response.routes
  optional uint32 route_idx = 2;
  optional string headsign = 3;
  optional string short_name = 4;
  optional Direction direction = 5;
  optional bool wheelchair_boarding = 6;
  optional bool bikes_allowed = 7;

}

enum Direction {
  Outbound = 0;
  Inbound = 1;
}

message Route {
  required string id = 1;

  // idx in Response.agencies
  required uint32 agency_idx = 2;
  optional string short_name = 3;
  optional string long_name = 4;
  optional string description = 5;
  required RouteType route_type = 6;
  optional string url = 7;
  optional Color color = 8;
  optional Color text_color = 9;
}

enum RouteType {
  Tram = 0;
  Subway = 1;
  Rail = 2;
  Bus = 3;
  Ferry = 4;
  CableTram = 5;
  AerialLift = 6;
  Funicular = 7;
  TrolleyBus = 11;
  Monorail = 12;
}

message Color {
  required string hex = 1;

}

message Agency {
  required string id = 1;
  required string name = 2;
  required string url = 3;
  required string timezone = 4;
  optional string lang = 5;

}

message Stop {
  required string id =1;
  required string name = 2;
  optional string code = 3;
  optional string description = 4;
  required Coord coord = 5;
  optional string zone_id = 6;
  optional string url = 7;

  //idx in Response.stations
  optional uint32 station_idx = 8;
  optional string timezone = 9;
  optional bool wheelchair_boarding = 10;

}

message Station {
  required string id =1;
  required string name = 2;
  optional string code = 3;
  optional string description = 4;
  required Coord coord = 5;
  optional string url = 7;
  optional string timezone = 8;
  optional bool wheelchair_boarding = 9;
}

message Coord {
  required double lat = 1;
  required double lon = 2;
}

message Journey {
  required Timestamp departure_time = 1;
  required Timestamp arrival_time = 2;
  required Duration departure_fallback = 3;
  required Duration arrival_fallback = 4;
  repeated Leg legs = 5;
  repeated Transfer transfers = 6;
}

message Timestamp {
  // number of seconds since Jan 1st 1970
  required uint64 seconds = 1;
}

message Duration {
  required uint32 seconds = 1;
}


message Delay {
  required int32 seconds = 1;
}


message Transfer {
  required Duration walking = 1;
  required Duration wait = 2;
}

message Date {
  // YYYYMMDD
  required string date = 1;
}

message Leg {

  // idx in Response.trips
  required uint32 trip_idx = 1;
  required Date trip_date = 2;
  repeated StopTime stop_times = 3;

  // idx in Response.trip_udpates
  optional uint32 trip_update = 4;

  // idx in Response.service_alerts
  repeated uint32 service_alerts = 5;
}

message StopTime {
  required Timestamp board_time = 1;
  required Timestamp debark_time = 2;

  // idx in Response.stops
  required uint32 stop_idx = 3;
  required bool can_board = 4;
  required bool can_debark = 5;
  optional string stop_headsign = 6;

  // delay from TripUpdate on this trip, if any
  // only appears when realtime_level = Realtime
  optional Delay board_delay = 7;

  // delay from TripUpdate on this trip, if any
  // only appears when realtime_level = Realtime
  optional Delay debark_delay = 8;
}

message TripUpdate {
  required string feed_name = 1;
  required Timestamp feed_timestamp = 2;
  required string trip_update_id = 3;
  required TripUpdateType update_type = 4;
  optional Timestamp trip_update_timestamp = 5;
}

enum TripUpdateType {
  DELETED = 1;
  MODIFIED = 2;
  ADDED = 3;
}

message ServiceAlert {
  required string feed_name = 1;
  required Timestamp feed_timestamp = 2;
  required string service_alert_id = 3;
  repeated Period active_periods = 5;
  required Cause cause = 6;
  required Effect effect = 7;
  required Severity severity = 8;
  optional Translations url = 10;
  optional Translations header = 11;
  optional Translations description = 12;
}

message Period {
  optional Timestamp start = 1;
  optional Timestamp end = 2;
}

enum Cause {
    UNKNOWN_CAUSE = 1;
    OTHER_CAUSE = 2;
    TECHNICAL_PROBLEM = 3;
    STRIKE = 4;
    DEMONSTRATION = 5;
    ACCIDENT = 6;
    HOLIDAY = 7;
    WEATHER = 8;
    MAINTENANCE = 9;
    CONSTRUCTION = 10;
    POLICE_ACTIVITY = 11;
    MEDICAL_EMERGENCY = 12;
  }
enum Effect {
    NO_SERVICE = 1;
    REDUCED_SERVICE = 2;
    SIGNIFICANT_DELAYS = 3;
    DETOUR = 4;
    ADDITIONAL_SERVICE = 5;
    MODIFIED_SERVICE = 6;
    OTHER_EFFECT = 7;
    UNKNOWN_EFFECT = 8;
    STOP_MOVED = 9;
    NO_EFFECT = 10;
    ACCESSIBILITY_ISSUE = 11;
  }

enum Severity {
	UNKNOWN_SEVERITY = 1;
	INFO = 2;
	WARNING = 3;
	SEVERE = 4;
  }

message Translations {
  optional string text_no_lang = 1;
  repeated Translation translations = 2;
}

message Translation {
  required string lang = 1;
  required string text = 2;
}
